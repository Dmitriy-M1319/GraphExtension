Примитивные варианты запросов для будущей графовой БД:

1 - Создание нового графа
CREATE GRAPH graph_name (pam: Person{name: "Pam"}, bob: Person{name: "Bob"}, ...), ((pam: Person)-[:PARENT]->(bob: Person), ...);

2 - Варианты выборки данных

2.1 - Простая выборка всех узлов в графе
MATCH FROM graph_name (p:Person) RETURN p;

2.2 - Поиск по имеющимся связям
MATCH FROM graph_name res = (:Person{name: "Pam"})-[:PARENT]->(:Person{name: "Bob"}) RETURN res;
Если вместо метки указано [:], то ищутся все возможные связи

2.3 - Вывод имеющихся связей (ребер)
MATCH FROM graph_name (p1:Person)-[:PARENT]->(p2:Person) RETURN p1, p2;
По итогу формируется таблица связей

2.4 - Вывод всех соседей (по метке ребра или всех возможных)
MATCH FROM graph_name result = (p1:Person)-[:PARENT]->() RETURN result;

3 - Обновление данных
MATCH FROM graph_name (p:Person) WHERE p.name="Bob" SET p.age=18;
Либо создается новое поле, либо метка обновляется

4 - Удаление
4.1 - Удаление самих узлов
MATCH FROM graph_name (p:Person) (WHERE p.name="Bob")? DELETE p;
Можно сделать удаление по условию

4.2 - Удаление связей (ребер) между узлами
MATCH FROM graph_name (p1:Person)-[r:]->(p2:Person) DELETE r;
Если указать r:PARENT, то удалятся ребра с меткой PARENT


// Выражения
stmt: create_stmt
    | match_stmt;

create_stmt: CREATE GRAPH obj_name nodes_list ',' edges_list;

match_stmt: MATCH FROM obj_name edge_assign where_stmt chstate_stmts;

edge_assign: egde_assign
           | nodes_list;

edge_assign: obj_name '=' edges_list
           | edges_list;

where_stmt: WHERE assign
    | '';

chstate_stmts: set_stmt 
             | delete_stmt 
             | return_stmt;

delete_stmt: DELETE obj_name;

set_stmt: SET assign;

return_stmt: RETURN obj_list;

obj_list: obj_name ',' obj_list 
        | obj_name;

assign: obj_name '.' obj_name '=' str_value;

// Разбор ребер графа
edges_list: '(' edges_list ')';

edges_list: edge ',' edges_list
          | edge;

edge: nodes_list '-' edge '->' nodes_list;

edge: '[' obj_name ':' label ']';

label: label | '';


// Разбор узлов графа
nodes_list: '(' nodes_list ')';

nodes_list: node ',' nodes_list
          | node

node: obj_name ':' node | '';

node: label '{' node_body '}' | label;

node_body: key_value ',' node_body
         | key_value;

key_value: obj_name ':' str_value;

obj_name: obj_name | ''

